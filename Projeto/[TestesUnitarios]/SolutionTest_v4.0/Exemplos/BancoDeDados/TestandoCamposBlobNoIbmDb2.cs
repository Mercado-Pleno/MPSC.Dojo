using Microsoft.HostIntegration.MsDb2Client;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Linq;
using System.Data;
using System.IO;
using System.Text;
using IBM.Data.DB2.iSeries;
using System.Collections.Generic;

namespace MP.Library.TestesUnitarios.SolutionTest_v4.Exemplos.BancoDeDados
{
	[TestClass]
	public class TestandoCamposBlobNoIbmDb2
	{
		private const String strCon0 = @"Provider=DB2OLEDB;Cache Authentication=False;Password=B0FAPSNL1A;Persist Security Info=True;User ID=usrcatalog;Initial Catalog=Mtzsrva9;Data Source=ESIM;Authentication=Server;Defer Prepare=False;DateTime As Char=False;Use Early Metadata=False;Derive Parameters=False;Network Transport Library=TCPIP;Host CCSID=37;PC Code Page=1252;Database Name=ESIM;Network Address=Mtzsrva9;Network Port=446;Package Collection=ESIM;Default Schema=ESIM;Default Qualifier=ESIM;DBMS Platform=DB2/AS400;Process Binary as Character=False;DateTime As Date=False;AutoCommit=False;Connection Pooling=True;Units of Work=RUW;";
		private const string strCon1 = @"DataSource=Mtzsrva9;UserID=usrcatalog;Password=B0FAPSNL1A;DataCompression=True;SortSequence=SharedWeight;SortLanguageId=PTG;DefaultCollection=ESIM;";
		private const String cmdSql1 = @"Select PES.SchemaInPut, PES.SchemaOutPut, Length(PES.SchemaInPut), Length(PES.SchemaOutPut) From PoliticaEstornoSchema PES";
		private const String cmdSql2 = @"Select PES.SchemaInPut From PoliticaEstornoSchema PES";

		[TestMethod, Ignore]
		public void TestandoComDataReader()
		{
			var idbConnection = new iDB2Connection(strCon1);
			idbConnection.Open();
			var idbCommand = idbConnection.CreateCommand();
			idbCommand.CommandText = cmdSql2;

			var iDataReader = idbCommand.ExecuteReader(CommandBehavior.SequentialAccess);
			while (iDataReader.Read())
			{
				//var a = iDataReader.GetiDB2Blob(0).Value;
				//var aa = Encoding.Default.GetString(a);
				var b = iDataReader.ReadBytes(0);
				var c = iDataReader.GetStream(0).ReadStream();
				var d = iDataReader.GetFieldValue<Byte[]>(0);
				var e = iDataReader.GetValue(0);
				var f = iDataReader[0];
			}

			iDataReader.Close();
			iDataReader.Dispose();
			idbCommand.Dispose();
			idbConnection.Close();
			idbConnection.Dispose();
		}

		[TestMethod, Ignore]
		public void TestandoComDataTable()
		{
			var connection = new MsDb2Connection(strCon0);
			connection.Open();

			var ds = new DataSet("Schema");
			var da = new MsDb2DataAdapter(cmdSql1, connection);
			da.Fill(ds, "Schema");

			var myRow = ds.Tables["Schema"].Rows[0];
			var schema = myRow[0];

			Console.WriteLine(schema.ToString());
			connection.Close();
		}

		[TestMethod, Ignore]
		public void Converter()
		{
			var hex = @"0xfffe3c003f0078006d006c002000760065007200730069006f006e003d00220031002e0030002200200065006e0063006f00640069006e0067003d0022007500740066002d003100360022003f003e000d000a003c00780073003a0073006300680065006d006100200065006c0065006d0065006e00740046006f0072006d00440065006600610075006c0074003d0022007100750061006c00690066006900650064002200200078006d006c006e0073003a00780073003d00220068007400740070003a002f002f007700770077002e00770033002e006f00720067002f0032003000300031002f0058004d004c0053006300680065006d00610022003e000d000a00200020003c00780073003a0065006c0065006d0065006e00740020006e0061006d0065003d0022004500730074006f0072006e006f0049006d0070006c0061006e0074006100630061006f00220020006e0069006c006c00610062006c0065003d00220074007200750065002200200074007900700065003d0022004500730074006f0072006e006f0049006d0070006c0061006e0074006100630061006f00220020002f003e000d000a00200020003c00780073003a0063006f006d0070006c0065007800540079007000650020006e0061006d0065003d0022004500730074006f0072006e006f0049006d0070006c0061006e0074006100630061006f0022003e000d000a0020002000200020003c00780073003a00730065007100750065006e00630065003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003100220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d00220050006f006c00690074006900630061004500730074006f0072006e006f00490044002200200074007900700065003d002200780073003a0069006e007400220020002f003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003100220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d00220050006f006c00690074006900630061004500730074006f0072006e006f004e006f006d0065002200200074007900700065003d002200780073003a0073007400720069006e006700220020002f003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003100220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d002200560065007200730061006f002200200074007900700065003d002200780073003a0069006e007400220020002f003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003100220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d0022005400690070006f004500760065006e0074006f004f007000650072006100630069006f006e0061006c002200200074007900700065003d002200780073003a0069006e007400220020002f003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003100220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d0022004300700066002200200074007900700065003d002200780073003a006c006f006e006700220020002f003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003000220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d0022005400690070006f00730043006f006d0069007300730061006f002200200074007900700065003d002200410072007200610079004f0066005400690070006f0043006f006d0069007300730061006f00220020002f003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003000220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d002200500072006f006400750074006f0073002200200074007900700065003d002200410072007200610079004f006600500072006f006400750074006f00220020002f003e000d000a0020002000200020003c002f00780073003a00730065007100750065006e00630065003e000d000a00200020003c002f00780073003a0063006f006d0070006c006500780054007900700065003e000d000a00200020003c00780073003a0063006f006d0070006c0065007800540079007000650020006e0061006d0065003d002200410072007200610079004f0066005400690070006f0043006f006d0069007300730061006f0022003e000d000a0020002000200020003c00780073003a00730065007100750065006e00630065003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003000220020006d00610078004f00630063007500720073003d00220075006e0062006f0075006e00640065006400220020006e0061006d0065003d0022005400690070006f0043006f006d0069007300730061006f00220020006e0069006c006c00610062006c0065003d00220074007200750065002200200074007900700065003d0022005400690070006f0043006f006d0069007300730061006f00220020002f003e000d000a0020002000200020003c002f00780073003a00730065007100750065006e00630065003e000d000a00200020003c002f00780073003a0063006f006d0070006c006500780054007900700065003e000d000a00200020003c00780073003a0063006f006d0070006c0065007800540079007000650020006e0061006d0065003d0022005400690070006f0043006f006d0069007300730061006f0022003e000d000a0020002000200020003c00780073003a00730065007100750065006e00630065003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003100220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d002200490064002200200074007900700065003d002200780073003a0069006e007400220020002f003e000d000a0020002000200020003c002f00780073003a00730065007100750065006e00630065003e000d000a00200020003c002f00780073003a0063006f006d0070006c006500780054007900700065003e000d000a00200020003c00780073003a0063006f006d0070006c0065007800540079007000650020006e0061006d0065003d002200410072007200610079004f006600500072006f006400750074006f0022003e000d000a0020002000200020003c00780073003a00730065007100750065006e00630065003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003000220020006d00610078004f00630063007500720073003d00220075006e0062006f0075006e00640065006400220020006e0061006d0065003d002200500072006f006400750074006f00220020006e0069006c006c00610062006c0065003d00220074007200750065002200200074007900700065003d002200500072006f006400750074006f00220020002f003e000d000a0020002000200020003c002f00780073003a00730065007100750065006e00630065003e000d000a00200020003c002f00780073003a0063006f006d0070006c006500780054007900700065003e000d000a00200020003c00780073003a0063006f006d0070006c0065007800540079007000650020006e0061006d0065003d002200500072006f006400750074006f0022003e000d000a0020002000200020003c00780073003a00730065007100750065006e00630065003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003100220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d002200490044002200200074007900700065003d002200780073003a0069006e007400220020002f003e000d000a002000200020002000200020003c00780073003a0065006c0065006d0065006e00740020006d0069006e004f00630063007500720073003d0022003100220020006d00610078004f00630063007500720073003d0022003100220020006e0061006d0065003d0022005000720061007a006f002200200074007900700065003d002200780073003a00730068006f0072007400220020002f003e000d000a0020002000200020003c002f00780073003a00730065007100750065006e00630065003e000d000a00200020003c002f00780073003a0063006f006d0070006c006500780054007900700065003e000d000a003c002f00780073003a0073006300680065006d0061003e00";
			var str1 = hex.Substring(6).FromHexString();
			var str2 = String.Join("", str1.Where(c => c != '\0'));
			Console.WriteLine(str2);

			var schema = obterSchema();
			var schemaHex = schema.ToHexString();
			var schemaStr = schemaHex.FromHexString();
			//Console.WriteLine(schemaStr);
		}


		private static String obterSchema()
		{
			return schema.Replace("''", "\"");
		}

		private const String schema = @"<?xml version=''1.0'' encoding=''utf-16''?>
<xs:schema elementFormDefault=''qualified'' xmlns:xs=''http://www.w3.org/2001/XMLSchema''>
  <xs:element name=''EstornoImplantacao'' nillable=''true'' type=''EstornoImplantacao'' />
  <xs:complexType name=''EstornoImplantacao''>
    <xs:sequence>
      <xs:element minOccurs=''1'' maxOccurs=''1'' name=''PoliticaEstornoID'' type=''xs:int'' />
      <xs:element minOccurs=''1'' maxOccurs=''1'' name=''PoliticaEstornoNome'' type=''xs:string'' />
      <xs:element minOccurs=''1'' maxOccurs=''1'' name=''Versao'' type=''xs:int'' />
      <xs:element minOccurs=''1'' maxOccurs=''1'' name=''TipoEventoOperacional'' type=''xs:int'' />
      <xs:element minOccurs=''1'' maxOccurs=''1'' name=''Cpf'' type=''xs:long'' />
      <xs:element minOccurs=''0'' maxOccurs=''1'' name=''TiposComissao'' type=''ArrayOfTipoComissao'' />
      <xs:element minOccurs=''0'' maxOccurs=''1'' name=''Produtos'' type=''ArrayOfProduto'' />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name=''ArrayOfTipoComissao''>
    <xs:sequence>
      <xs:element minOccurs=''0'' maxOccurs=''unbounded'' name=''TipoComissao'' nillable=''true'' type=''TipoComissao'' />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name=''TipoComissao''>
    <xs:sequence>
      <xs:element minOccurs=''1'' maxOccurs=''1'' name=''Id'' type=''xs:int'' />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name=''ArrayOfProduto''>
    <xs:sequence>
      <xs:element minOccurs=''0'' maxOccurs=''unbounded'' name=''Produto'' nillable=''true'' type=''Produto'' />
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name=''Produto''>
    <xs:sequence>
      <xs:element minOccurs=''1'' maxOccurs=''1'' name=''ID'' type=''xs:int'' />
      <xs:element minOccurs=''1'' maxOccurs=''1'' name=''Prazo'' type=''xs:short'' />
    </xs:sequence>
  </xs:complexType>
</xs:schema>";
	}

	public static class Extensions
	{
		private static Int32 cTamanhoBuffer = 128;

		private static String _DefaultConverter(Byte[] bytes)
		{
			var chars = bytes.Select(b => Convert.ToChar(b));
			return new String(chars.ToArray());
		}

		public static String ReadBytes(this IDataReader iDataReader, Int32 columnIndex, Func<Byte[], String> converter = null)
		{
			converter = converter ?? _DefaultConverter;
			var totalBytes = 0L;
			var retorno = String.Empty;
			var buffer = new Byte[cTamanhoBuffer];
			var bytesLidos = iDataReader.GetBytes(columnIndex, totalBytes, buffer, 0, cTamanhoBuffer);
			while (bytesLidos > 0)
			{
				retorno += converter(buffer.Take(Convert.ToInt32(bytesLidos)).ToArray());
				totalBytes += bytesLidos;
				bytesLidos = iDataReader.GetBytes(columnIndex, totalBytes, buffer, 0, cTamanhoBuffer);
			}
			return retorno;
		}

		public static String ReadStream(this Stream stream, Func<Byte[], String> converter = null)
		{
			converter = converter ?? _DefaultConverter;
			var totalBytes = 0L;
			var retorno = String.Empty;
			var buffer = new Byte[cTamanhoBuffer];
			var bytesLidos = stream.Read(buffer, 0, cTamanhoBuffer);
			while (bytesLidos > 0)
			{
				retorno += converter(buffer.Take(Convert.ToInt32(bytesLidos)).ToArray());
				totalBytes += bytesLidos;
				bytesLidos = stream.Read(buffer, 0, cTamanhoBuffer);
			}
			return retorno;
		}

		public static String ToHexString(this String str)
		{
			var sb = new StringBuilder();

			var bytes = Encoding.UTF8.GetBytes(str);
			foreach (var t in bytes)
			{
				sb.Append(t.ToString("X2"));
			}

			return sb.ToString(); // returns: "48656C6C6F20776F726C64" for "Hello world"
		}

		public static String FromHexString(this String hexString)
		{
			var bytes = new byte[hexString.Length / 2];
			for (var i = 0; i < bytes.Length; i++)
			{
				bytes[i] = Convert.ToByte(hexString.Substring(i * 2, 2), 16);
			}

			return Encoding.UTF8.GetString(bytes); // returns: "Hello world" for "48656C6C6F20776F726C64"
		}
	}
}